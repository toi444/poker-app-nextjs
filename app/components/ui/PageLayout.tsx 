// app/components/ui/PageLayout.tsx
'use client'

import { useState, useEffect, ReactNode } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { 
  TrendingUp, BarChart3, Coins, BookOpen, DollarSign,
  User, Sparkles
} from 'lucide-react'

type Section = 'game-report' | 'data' | 'all-gamble' | 'lesson' | 'pbank'

interface PageLayoutProps {
  children: ReactNode
  activeSection?: Section
  showBottomNav?: boolean
}

export function PageLayout({ 
  children, 
  activeSection,
  showBottomNav = true 
}: PageLayoutProps) {
  const router = useRouter()
  const pathname = usePathname()
  const [user, setUser] = useState<any>(null)
  const [allGamble30Days, setAllGamble30Days] = useState(0)

  useEffect(() => {
    loadUser()
  }, [])

  const loadUser = async () => {
    const { data: { user: authUser } } = await supabase.auth.getUser()
    if (!authUser) return

    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', authUser.id)
      .single()

    const isAdmin = authUser.email === 'toui.reigetsu@gmail.com'
    
    setUser({
      ...authUser,
      ...profile,
      role: isAdmin ? 'admin' : (profile?.role || 'player')
    })

    await loadAllGamble30Days(authUser.id)
  }

  const loadAllGamble30Days = async (userId: string) => {
    const thirtyDaysAgo = new Date()
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
    const startDate = thirtyDaysAgo.toISOString().split('T')[0]
    const endDate = new Date().toISOString().split('T')[0]

    const { data: gambleData } = await supabase
      .from('gamble_records')
      .select('profit')
      .eq('user_id', userId)
      .gte('played_date', startDate)
      .lte('played_date', endDate)

    const { data: gameData } = await supabase
      .from('game_sessions')
      .select('profit, played_at')
      .eq('user_id', userId)

    const prettyCureData = gameData
      ?.map(g => {
        const playedDate = new Date(g.played_at)
        const jstDate = new Date(playedDate.getTime() + 9 * 60 * 60 * 1000)
        const dateStr = jstDate.toISOString().split('T')[0]
        return { profit: g.profit, date: dateStr }
      })
      .filter(g => g.date >= startDate && g.date <= endDate) || []

    const allData = [...(gambleData || []), ...prettyCureData]
    const totalProfit = allData.reduce((sum, r) => sum + r.profit, 0)
    setAllGamble30Days(totalProfit)
  }

  const handleNavClick = (section: Section) => {
    const routes: Record<Section, string> = {
      'game-report': '/dashboard',
      'data': '/dashboard',
      'all-gamble': '/dashboard',
      'lesson': '/dashboard',
      'pbank': '/dashboard'
    }
    router.push(routes[section])
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900">
      {/* ヘッダー */}
      <div className="bg-black/50 backdrop-blur-xl border-b border-purple-500/30 sticky top-0 z-50 shadow-lg shadow-purple-500/20">
        <div className="container max-w-md mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="relative">
                <div className="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl blur-lg animate-pulse" />
                <div className="relative w-12 h-12 bg-gradient-to-br from-purple-600 via-pink-600 to-red-600 rounded-2xl flex items-center justify-center shadow-xl">
                  <Sparkles className="w-6 h-6 text-white animate-spin-slow" />
                </div>
              </div>
              <div>
                <h1 className="text-lg font-black bg-gradient-to-r from-purple-400 via-pink-400 to-red-400 bg-clip-text text-transparent animate-shimmer">
                  Pretty Cure!
                </h1>
                <p className="text-xs text-purple-300">Gamble Manager</p>
              </div>
            </div>
            
            {user && (
              <button
                onClick={() => router.push('/profile')}
                className="group relative"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl blur-md opacity-75 group-hover:opacity-100 transition-opacity" />
                <div className="relative flex items-center gap-3 bg-black/80 backdrop-blur-sm rounded-2xl px-3 py-2 border-2 border-purple-500/50">
                  <div className="relative">
                    {user?.avatar_url ? (
                      <img 
                        src={user.avatar_url} 
                        alt="avatar" 
                        className="w-10 h-10 rounded-full object-cover border-2 border-purple-400 shadow-lg shadow-purple-500/50"
                      />
                    ) : (
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center shadow-lg shadow-purple-500/50">
                        <User className="w-5 h-5 text-white" />
                      </div>
                    )}
                    <div className="absolute -bottom-1 -right-1 w-3.5 h-3.5 bg-green-500 rounded-full border-2 border-black animate-pulse shadow-lg shadow-green-500/50" />
                  </div>
                  <div className="text-left">
                    <p className="text-[10px] text-purple-300">30日収支</p>
                    <p className={`text-sm font-black ${allGamble30Days >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {allGamble30Days >= 0 ? '+' : ''}{allGamble30Days.toLocaleString()}P
                    </p>
                  </div>
                </div>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* メインコンテンツ */}
      <div className="container max-w-md mx-auto px-4 py-6 pb-32">
        {children}
      </div>

      {/* ボトムナビゲーション */}
      {showBottomNav && (
        <div className="fixed bottom-0 left-0 right-0 bg-black/90 backdrop-blur-2xl border-t-2 border-purple-500/50 shadow-2xl shadow-purple-500/20 z-50">
          <div className="container max-w-md mx-auto px-4 py-4">
            <div className="flex items-end justify-around">
              {[
                { id: 'game-report', icon: TrendingUp, label: 'Report', color: 'violet' },
                { id: 'data', icon: BarChart3, label: 'Data', color: 'blue' },
                { id: 'all-gamble', icon: Coins, label: 'ALL-Gamble', color: 'orange', big: true },
                { id: 'lesson', icon: BookOpen, label: 'Lesson', color: 'pink' },
                { id: 'pbank', icon: DollarSign, label: 'P-BANK', color: 'emerald' }
              ].map((item) => (
                <button
                  key={item.id}
                  onClick={() => handleNavClick(item.id as Section)}
                  className={`flex flex-col items-center transition-all ${item.big ? '-mt-6' : ''} ${
                    activeSection === item.id ? `text-${item.color}-400` : 'text-gray-500'
                  }`}
                >
                  <div className="relative">
                    {activeSection === item.id && (
                      <div className={`absolute inset-0 bg-${item.color}-600 blur-xl animate-pulse`} />
                    )}
                    <div className={`relative ${item.big ? 'w-20 h-20' : 'w-14 h-14'} rounded-3xl flex items-center justify-center transition-all ${
                      activeSection === item.id
                        ? `bg-gradient-to-br from-${item.color}-600 to-${item.color}-700 shadow-2xl shadow-${item.color}-500/50 scale-110 border-2 border-${item.color}-400`
                        : 'bg-gray-800/50 border-2 border-gray-700/50'
                    }`}>
                      <item.icon className={`${item.big ? 'w-10 h-10' : 'w-7 h-7'} ${activeSection === item.id ? 'text-white drop-shadow-glow' : 'text-gray-500'}`} />
                    </div>
                  </div>
                  <span className={`text-xs font-bold mt-2 ${activeSection === item.id ? 'text-white' : 'text-gray-500'}`}>
                    {item.label}
                  </span>
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      <style jsx global>{`
        @keyframes shimmer {
          0% {
            background-position: -200% center;
          }
          100% {
            background-position: 200% center;
          }
        }

        @keyframes spin-slow {
          from {
            transform: rotate(0deg);
          }
          to {
            transform: rotate(360deg);
          }
        }

        .animate-shimmer {
          background: linear-gradient(90deg, #a855f7, #ec4899, #f97316, #a855f7);
          background-size: 200% auto;
          animation: shimmer 3s linear infinite;
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
        }

        .animate-spin-slow {
          animation: spin-slow 8s linear infinite;
        }

        .drop-shadow-glow {
          filter: drop-shadow(0 0 8px currentColor);
        }
      `}</style>
    </div>
  )
}